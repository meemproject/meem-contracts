/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MeemInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerTokens(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "setChildDepth(uint256)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMeemIDAddress(address)": FunctionFragment;
    "setNonOwnerSplitAllocationAmount(uint256)": FunctionFragment;
    "setTokenCounter(uint256)": FunctionFragment;
    "verifyToken(uint256)": FunctionFragment;
    "mint(tuple,tuple,tuple)": FunctionFragment;
    "mintAndCopy(tuple,tuple,tuple,address)": FunctionFragment;
    "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)": FunctionFragment;
    "addPermission(uint256,uint8,uint8,tuple)": FunctionFragment;
    "lockChildrenPerWallet(uint256,uint8)": FunctionFragment;
    "lockPermissions(uint256,uint8,uint8)": FunctionFragment;
    "lockTotalChildren(uint256,uint8)": FunctionFragment;
    "removePermissionAt(uint256,uint8,uint8,uint256)": FunctionFragment;
    "setChildrenPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setPermissions(uint256,uint8,uint8,tuple[])": FunctionFragment;
    "setTotalChildren(uint256,uint8,int256)": FunctionFragment;
    "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)": FunctionFragment;
    "childDepth()": FunctionFragment;
    "childrenOf(uint256)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "isNFTWrapped(uint8,address,uint256)": FunctionFragment;
    "numChildrenOf(uint256)": FunctionFragment;
    "ownedChildrenOf(uint256,address)": FunctionFragment;
    "tokenIdOfOwnerIndex(address,uint256)": FunctionFragment;
    "tokenIdsOfOwner(address)": FunctionFragment;
    "wrappedTokens(tuple[])": FunctionFragment;
    "addSplit(uint256,uint8,tuple)": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "lockSplits(uint256,uint8)": FunctionFragment;
    "nonOwnerSplitAllocationAmount()": FunctionFragment;
    "removeSplitAt(uint256,uint8,uint256)": FunctionFragment;
    "setSplits(uint256,uint8,tuple[])": FunctionFragment;
    "updateSplitAt(uint256,uint8,uint256,tuple)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "diamondCut(tuple[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMeemIDAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndCopy",
    values: [
      {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndRemix",
    values: [
      {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockChildrenPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalChildren",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildrenPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalChildren",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "childDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNFTWrapped",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numChildrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedChildrenOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdOfOwnerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [
      { chain: BigNumberish; contractAddress: string; tokenId: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplit",
    values: [
      BigNumberish,
      BigNumberish,
      { toAddress: string; amount: BigNumberish; lockedBy: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSplits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonOwnerSplitAllocationAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [
      BigNumberish,
      BigNumberish,
      { toAddress: string; amount: BigNumberish; lockedBy: string }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplitAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { toAddress: string; amount: BigNumberish; lockedBy: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      { target: string; action: BigNumberish; selectors: BytesLike[] }[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMeemIDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndRemix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockChildrenPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildrenPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childDepth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdOfOwnerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "PropertiesSet(uint256,uint8,tuple)": EventFragment;
    "ChildrenPerWalletLocked(uint256,uint8,address)": EventFragment;
    "ChildrenPerWalletSet(uint256,uint8,int256)": EventFragment;
    "PermissionsSet(uint256,uint8,uint8,tuple[])": EventFragment;
    "TotalChildrenLocked(uint256,uint8,address)": EventFragment;
    "TotalChildrenSet(uint256,uint8,int256)": EventFragment;
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
    "SplitsSet(uint256,tuple[])": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildrenPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildrenPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalChildrenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalChildrenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Meem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MeemInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    "baseTokenURI()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    "contractAddress()"(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    "contractURI()"(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "ownerTokens(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    "tokenByIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setChildDepth(uint256)"(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setContractURI(string)"(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMeemIDAddress(address)"(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setNonOwnerSplitAllocationAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokenCounter(uint256)"(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verifyToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndCopy(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintAndCopy(tuple,tuple,tuple,address)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndRemix(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPermission(uint256,uint8,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockChildrenPerWallet(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockPermissions(uint256,uint8,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTotalChildren(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removePermissionAt(uint256,uint8,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setChildrenPerWallet(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPermissions(uint256,uint8,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTotalChildren(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "childDepth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "childrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          },
          [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          },
          BigNumber,
          string,
          string,
          number,
          string
        ] & {
          owner: string;
          parentChain: number;
          parent: string;
          parentTokenId: BigNumber;
          rootChain: number;
          root: string;
          rootTokenId: BigNumber;
          generation: BigNumber;
          properties: [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          };
          childProperties: [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          };
          mintedAt: BigNumber;
          data: string;
          verifiedBy: string;
          meemType: number;
          mintedBy: string;
        }
      ]
    >;

    "getMeem(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          },
          [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          },
          BigNumber,
          string,
          string,
          number,
          string
        ] & {
          owner: string;
          parentChain: number;
          parent: string;
          parentTokenId: BigNumber;
          rootChain: number;
          root: string;
          rootTokenId: BigNumber;
          generation: BigNumber;
          properties: [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          };
          childProperties: [
            BigNumber,
            string,
            BigNumber,
            string,
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[],
            string,
            string,
            string,
            ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[],
            string
          ] & {
            totalChildren: BigNumber;
            totalChildrenLockedBy: string;
            childrenPerWallet: BigNumber;
            childrenPerWalletLockedBy: string;
            copyPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            remixPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            readPermissions: ([number, string[], BigNumber, string] & {
              permission: number;
              addresses: string[];
              numTokens: BigNumber;
              lockedBy: string;
            })[];
            copyPermissionsLockedBy: string;
            remixPermissionsLockedBy: string;
            readPermissionsLockedBy: string;
            splits: ([string, BigNumber, string] & {
              toAddress: string;
              amount: BigNumber;
              lockedBy: string;
            })[];
            splitsLockedBy: string;
          };
          mintedAt: BigNumber;
          data: string;
          verifiedBy: string;
          meemType: number;
          mintedBy: string;
        }
      ]
    >;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isNFTWrapped(uint8,address,uint256)"(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "numChildrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownedChildrenOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "ownedChildrenOf(uint256,address)"(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenIdOfOwnerIndex(address,uint256)"(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    "tokenIdsOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    wrappedTokens(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "wrappedTokens(tuple[])"(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addSplit(uint256,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    "getRaribleV2Royalties(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockSplits(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonOwnerSplitAllocationAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeSplitAt(uint256,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSplits(uint256,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateSplitAt(uint256,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [([string, string[]] & { target: string; selectors: string[] })[]] & {
        diamondFacets: ([string, string[]] & {
          target: string;
          selectors: string[];
        })[];
      }
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      [([string, string[]] & { target: string; selectors: string[] })[]] & {
        diamondFacets: ([string, string[]] & {
          target: string;
          selectors: string[];
        })[];
      }
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  "baseTokenURI()"(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  "contractAddress()"(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  "contractURI()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "ownerTokens(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildDepth(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setChildDepth(uint256)"(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setContractURI(string)"(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMeemIDAddress(
    meemID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMeemIDAddress(address)"(
    meemID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonOwnerSplitAllocationAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setNonOwnerSplitAllocationAmount(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCounter(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokenCounter(uint256)"(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyToken(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verifyToken(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(tuple,tuple,tuple)"(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndCopy(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    toCopyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintAndCopy(tuple,tuple,tuple,address)"(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    toCopyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndRemix(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    remixParams: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    remixProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    remixChildProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)"(
    params: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    properties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    childProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    remixParams: {
      to: string;
      mTokenURI: string;
      parentChain: BigNumberish;
      parent: string;
      parentTokenId: BigNumberish;
      meemType: BigNumberish;
      data: string;
      isVerified: boolean;
      mintedBy: string;
    },
    remixProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    remixChildProperties: {
      totalChildren: BigNumberish;
      totalChildrenLockedBy: string;
      childrenPerWallet: BigNumberish;
      childrenPerWalletLockedBy: string;
      copyPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      remixPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      readPermissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[];
      copyPermissionsLockedBy: string;
      remixPermissionsLockedBy: string;
      readPermissionsLockedBy: string;
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
      splitsLockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPermission(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPermission(uint256,uint8,uint8,tuple)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockChildrenPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockChildrenPerWallet(uint256,uint8)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockPermissions(uint256,uint8,uint8)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalChildren(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTotalChildren(uint256,uint8)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removePermissionAt(uint256,uint8,uint8,uint256)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildrenPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setChildrenPerWallet(uint256,uint8,int256)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permissions: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPermissions(uint256,uint8,uint8,tuple[])"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permissions: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalChildren(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTotalChildren(uint256,uint8,int256)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalChildren: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: {
      permission: BigNumberish;
      addresses: string[];
      numTokens: BigNumberish;
      lockedBy: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childDepth(overrides?: CallOverrides): Promise<BigNumber>;

  "childDepth()"(overrides?: CallOverrides): Promise<BigNumber>;

  childrenOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "childrenOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      },
      [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      },
      BigNumber,
      string,
      string,
      number,
      string
    ] & {
      owner: string;
      parentChain: number;
      parent: string;
      parentTokenId: BigNumber;
      rootChain: number;
      root: string;
      rootTokenId: BigNumber;
      generation: BigNumber;
      properties: [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      };
      childProperties: [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      };
      mintedAt: BigNumber;
      data: string;
      verifiedBy: string;
      meemType: number;
      mintedBy: string;
    }
  >;

  "getMeem(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      },
      [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      },
      BigNumber,
      string,
      string,
      number,
      string
    ] & {
      owner: string;
      parentChain: number;
      parent: string;
      parentTokenId: BigNumber;
      rootChain: number;
      root: string;
      rootTokenId: BigNumber;
      generation: BigNumber;
      properties: [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      };
      childProperties: [
        BigNumber,
        string,
        BigNumber,
        string,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[],
        string,
        string,
        string,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[],
        string
      ] & {
        totalChildren: BigNumber;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumber;
        childrenPerWalletLockedBy: string;
        copyPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        remixPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        readPermissions: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
        splitsLockedBy: string;
      };
      mintedAt: BigNumber;
      data: string;
      verifiedBy: string;
      meemType: number;
      mintedBy: string;
    }
  >;

  isNFTWrapped(
    chain: BigNumberish,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isNFTWrapped(uint8,address,uint256)"(
    chain: BigNumberish,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numChildrenOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numChildrenOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownedChildrenOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "ownedChildrenOf(uint256,address)"(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenIdOfOwnerIndex(
    _owner: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenIdOfOwnerIndex(address,uint256)"(
    _owner: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdsOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "tokenIdsOfOwner(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  wrappedTokens(
    items: {
      chain: BigNumberish;
      contractAddress: string;
      tokenId: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "wrappedTokens(tuple[])"(
    items: {
      chain: BigNumberish;
      contractAddress: string;
      tokenId: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addSplit(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: { toAddress: string; amount: BigNumberish; lockedBy: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addSplit(uint256,uint8,tuple)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: { toAddress: string; amount: BigNumberish; lockedBy: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  "getRaribleV2Royalties(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  lockSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockSplits(uint256,uint8)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonOwnerSplitAllocationAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "nonOwnerSplitAllocationAmount()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeSplitAt(uint256,uint8,uint256)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSplits(uint256,uint8,tuple[])"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: { toAddress: string; amount: BigNumberish; lockedBy: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateSplitAt(uint256,uint8,uint256,tuple)"(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: { toAddress: string; amount: BigNumberish; lockedBy: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: {
      target: string;
      action: BigNumberish;
      selectors: BytesLike[];
    }[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "diamondCut(tuple[],address,bytes)"(
    facetCuts: {
      target: string;
      action: BigNumberish;
      selectors: BytesLike[];
    }[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  "facetAddress(bytes4)"(
    selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<([string, string[]] & { target: string; selectors: string[] })[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<([string, string[]] & { target: string; selectors: string[] })[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  "getFallbackAddress()"(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  "nomineeOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFallbackAddress(address)"(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    "baseTokenURI()"(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    "contractAddress()"(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    "contractURI()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "ownerTokens(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChildDepth(uint256)"(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractURI(string)"(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMeemIDAddress(meemID: string, overrides?: CallOverrides): Promise<void>;

    "setMeemIDAddress(address)"(
      meemID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNonOwnerSplitAllocationAmount(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenCounter(uint256)"(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndCopy(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintAndCopy(tuple,tuple,tuple,address)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndRemix(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addPermission(uint256,uint8,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockChildrenPerWallet(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockPermissions(uint256,uint8,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockTotalChildren(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removePermissionAt(uint256,uint8,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChildrenPerWallet(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPermissions(uint256,uint8,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalChildren(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    "childDepth()"(overrides?: CallOverrides): Promise<BigNumber>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "childrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        },
        [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        },
        BigNumber,
        string,
        string,
        number,
        string
      ] & {
        owner: string;
        parentChain: number;
        parent: string;
        parentTokenId: BigNumber;
        rootChain: number;
        root: string;
        rootTokenId: BigNumber;
        generation: BigNumber;
        properties: [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        };
        childProperties: [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        };
        mintedAt: BigNumber;
        data: string;
        verifiedBy: string;
        meemType: number;
        mintedBy: string;
      }
    >;

    "getMeem(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        },
        [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        },
        BigNumber,
        string,
        string,
        number,
        string
      ] & {
        owner: string;
        parentChain: number;
        parent: string;
        parentTokenId: BigNumber;
        rootChain: number;
        root: string;
        rootTokenId: BigNumber;
        generation: BigNumber;
        properties: [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        };
        childProperties: [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        };
        mintedAt: BigNumber;
        data: string;
        verifiedBy: string;
        meemType: number;
        mintedBy: string;
      }
    >;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isNFTWrapped(uint8,address,uint256)"(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numChildrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedChildrenOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "ownedChildrenOf(uint256,address)"(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdOfOwnerIndex(address,uint256)"(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "tokenIdsOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    wrappedTokens(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "wrappedTokens(tuple[])"(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "addSplit(uint256,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    "getRaribleV2Royalties(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockSplits(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonOwnerSplitAllocationAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSplitAt(uint256,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setSplits(uint256,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSplitAt(uint256,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & { target: string; selectors: string[] })[]
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & { target: string; selectors: string[] })[]
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      operator: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; operator: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    PropertiesSet(
      tokenId: null,
      propertyType: null,
      props: null
    ): TypedEventFilter<
      [
        BigNumber,
        number,
        [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        }
      ],
      {
        tokenId: BigNumber;
        propertyType: number;
        props: [
          BigNumber,
          string,
          BigNumber,
          string,
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[],
          string,
          string,
          string,
          ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[],
          string
        ] & {
          totalChildren: BigNumber;
          totalChildrenLockedBy: string;
          childrenPerWallet: BigNumber;
          childrenPerWalletLockedBy: string;
          copyPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          remixPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          readPermissions: ([number, string[], BigNumber, string] & {
            permission: number;
            addresses: string[];
            numTokens: BigNumber;
            lockedBy: string;
          })[];
          copyPermissionsLockedBy: string;
          remixPermissionsLockedBy: string;
          readPermissionsLockedBy: string;
          splits: ([string, BigNumber, string] & {
            toAddress: string;
            amount: BigNumber;
            lockedBy: string;
          })[];
          splitsLockedBy: string;
        };
      }
    >;

    ChildrenPerWalletLocked(
      tokenId: null,
      propertyType: null,
      lockedBy: null
    ): TypedEventFilter<
      [BigNumber, number, string],
      { tokenId: BigNumber; propertyType: number; lockedBy: string }
    >;

    ChildrenPerWalletSet(
      tokenId: null,
      propertyType: null,
      newTotalChildren: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { tokenId: BigNumber; propertyType: number; newTotalChildren: BigNumber }
    >;

    PermissionsSet(
      tokenId: null,
      propertyType: null,
      permissionType: null,
      permission: null
    ): TypedEventFilter<
      [
        BigNumber,
        number,
        number,
        ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[]
      ],
      {
        tokenId: BigNumber;
        propertyType: number;
        permissionType: number;
        permission: ([number, string[], BigNumber, string] & {
          permission: number;
          addresses: string[];
          numTokens: BigNumber;
          lockedBy: string;
        })[];
      }
    >;

    TotalChildrenLocked(
      tokenId: null,
      propertyType: null,
      lockedBy: null
    ): TypedEventFilter<
      [BigNumber, number, string],
      { tokenId: BigNumber; propertyType: number; lockedBy: string }
    >;

    TotalChildrenSet(
      tokenId: null,
      propertyType: null,
      newTotalChildren: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { tokenId: BigNumber; propertyType: number; newTotalChildren: BigNumber }
    >;

    RoyaltiesSet(
      tokenId: null,
      royalties: null
    ): TypedEventFilter<
      [
        BigNumber,
        ([string, BigNumber] & { account: string; value: BigNumber })[]
      ],
      {
        tokenId: BigNumber;
        royalties: ([string, BigNumber] & {
          account: string;
          value: BigNumber;
        })[];
      }
    >;

    SplitsSet(
      tokenId: null,
      splits: null
    ): TypedEventFilter<
      [
        BigNumber,
        ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[]
      ],
      {
        tokenId: BigNumber;
        splits: ([string, BigNumber, string] & {
          toAddress: string;
          amount: BigNumber;
          lockedBy: string;
        })[];
      }
    >;

    DiamondCut(
      facetCuts: null,
      target: null,
      data: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          target: string;
          action: number;
          selectors: string[];
        })[],
        string,
        string
      ],
      {
        facetCuts: ([string, number, string[]] & {
          target: string;
          action: number;
          selectors: string[];
        })[];
        target: string;
        data: string;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseTokenURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "contractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    "contractURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ownerTokens(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setChildDepth(uint256)"(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setContractURI(string)"(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMeemIDAddress(address)"(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setNonOwnerSplitAllocationAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokenCounter(uint256)"(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verifyToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndCopy(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintAndCopy(tuple,tuple,tuple,address)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndRemix(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPermission(uint256,uint8,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockChildrenPerWallet(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockPermissions(uint256,uint8,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTotalChildren(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removePermissionAt(uint256,uint8,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setChildrenPerWallet(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPermissions(uint256,uint8,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTotalChildren(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    "childDepth()"(overrides?: CallOverrides): Promise<BigNumber>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeem(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isNFTWrapped(uint8,address,uint256)"(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numChildrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedChildrenOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownedChildrenOf(uint256,address)"(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdOfOwnerIndex(address,uint256)"(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdsOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedTokens(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrappedTokens(tuple[])"(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addSplit(uint256,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRaribleV2Royalties(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockSplits(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonOwnerSplitAllocationAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeSplitAt(uint256,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSplits(uint256,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateSplitAt(uint256,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseTokenURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerTokens(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setChildDepth(uint256)"(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setContractURI(string)"(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMeemIDAddress(address)"(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setNonOwnerSplitAllocationAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenCounter(uint256)"(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verifyToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndCopy(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintAndCopy(tuple,tuple,tuple,address)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      toCopyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndRemix(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintAndRemix(tuple,tuple,tuple,tuple,tuple,tuple)"(
      params: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      properties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      childProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixParams: {
        to: string;
        mTokenURI: string;
        parentChain: BigNumberish;
        parent: string;
        parentTokenId: BigNumberish;
        meemType: BigNumberish;
        data: string;
        isVerified: boolean;
        mintedBy: string;
      },
      remixProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      remixChildProperties: {
        totalChildren: BigNumberish;
        totalChildrenLockedBy: string;
        childrenPerWallet: BigNumberish;
        childrenPerWalletLockedBy: string;
        copyPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        remixPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        readPermissions: {
          permission: BigNumberish;
          addresses: string[];
          numTokens: BigNumberish;
          lockedBy: string;
        }[];
        copyPermissionsLockedBy: string;
        remixPermissionsLockedBy: string;
        readPermissionsLockedBy: string;
        splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[];
        splitsLockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPermission(uint256,uint8,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockChildrenPerWallet(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockPermissions(uint256,uint8,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTotalChildren(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removePermissionAt(uint256,uint8,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildrenPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setChildrenPerWallet(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPermissions(uint256,uint8,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalChildren(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTotalChildren(uint256,uint8,int256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalChildren: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePermissionAt(uint256,uint8,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: {
        permission: BigNumberish;
        addresses: string[];
        numTokens: BigNumberish;
        lockedBy: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "childDepth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "childrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeem(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isNFTWrapped(uint8,address,uint256)"(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numChildrenOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numChildrenOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedChildrenOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownedChildrenOf(uint256,address)"(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdOfOwnerIndex(address,uint256)"(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdsOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedTokens(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedTokens(tuple[])"(
      items: {
        chain: BigNumberish;
        contractAddress: string;
        tokenId: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addSplit(uint256,uint8,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRaribleV2Royalties(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockSplits(uint256,uint8)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonOwnerSplitAllocationAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeSplitAt(uint256,uint8,uint256)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSplits(uint256,uint8,tuple[])"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: { toAddress: string; amount: BigNumberish; lockedBy: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateSplitAt(uint256,uint8,uint256,tuple)"(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: { toAddress: string; amount: BigNumberish; lockedBy: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFallbackAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
